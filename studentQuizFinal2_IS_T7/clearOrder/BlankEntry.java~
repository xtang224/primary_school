package com.example.android.searchabledict.util;

import android.os.Bundle;  
import android.graphics.Color; 
import android.widget.Button;  
import android.widget.EditText;
import android.widget.TextView; 
import android.view.View; 
import android.view.View.OnClickListener;  
import android.util.Log;  
import android.app.Activity;
import android.graphics.Typeface; 
import android.view.ViewGroup; 
import android.content.Intent;
import android.widget.LinearLayout; 
import android.text.Editable;
import android.widget.Toast;
import android.widget.ImageView;
import android.app.AlertDialog;
import android.widget.CheckBox;
import android.widget.CompoundButton; 
import android.widget.CompoundButton.OnCheckedChangeListener; 
import android.widget.RadioButton; 
import android.widget.RadioGroup;

import java.util.Random; 

import android.view.Menu; 
import android.view.MenuItem; 
import android.os.Environment;
import android.content.Context;
import android.media.MediaRecorder;
import android.media.MediaPlayer;

import java.io.IOException;

import android.speech.tts.TextToSpeech;

import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.HashMap;
import java.util.Locale;

import com.example.android.searchabledict.*;

public class BlankEntry {
	   
    public String statement_1st;
    public String statement_2nd;    
    public String solution;
    public String source; 
    
    public String yourSolution = "";
    public String time = "";
    public String owner = "";
    public String rightOrWrong = "";
    
    public String score = "";
    public String id = "";
    
    public BlankEntry(String statement_1st, String statement_2nd, String solution, String source){
    	this.statement_1st = statement_1st;
    	this.statement_2nd = statement_2nd;    	
    	this.solution = solution;    	    	
    	this.source = source;
    }
    
    public BlankEntry(String statement_1st, String statement_2nd, String solution, String source, String yourSolution, String time, String owner, String rightOrWrong){
    	this.statement_1st = statement_1st;
    	this.statement_2nd = statement_2nd;    	
    	this.solution = solution;    	    	
    	this.source = source;
    	
    	this.yourSolution = yourSolution;    	
    	this.time = time;
    	this.owner = owner;
    	this.rightOrWrong = rightOrWrong;
    }
    
    public BlankEntry(BlankEntry bEntry, String source, String yourSolution, String time, String owner, String rightOrWrong){
    	this.statement_1st = bEntry.statement_1st;
    	this.statement_2nd = bEntry.statement_2nd;    	
    	this.solution = bEntry.solution;    	 
    	
    	this.source = source;    	
    	this.yourSolution = yourSolution;
    	this.time = time;
    	this.owner = owner;
    	this.rightOrWrong = rightOrWrong;
    	
    	this.score = bEntry.score;
    	this.id = bEntry.id;
    }
    
    public boolean equalsIgnoreOwner(BlankEntry entry){
    	boolean ret = true;
    	if (!statement_1st.trim().equalsIgnoreCase(entry.statement_1st.trim()))
    		ret = false;
    	if (!statement_2nd.trim().equalsIgnoreCase(entry.statement_2nd.trim()))
    		ret = false;    	
    	if (!solution.trim().equalsIgnoreCase(entry.solution.trim()))
    		ret = false;    	
    	return ret;
    }
    
    public boolean equals(BlankEntry entry){
    	boolean ret = true;
    	if (!this.equalsIgnoreOwner(entry))
    		ret = false;    	
    	if (!owner.trim().equalsIgnoreCase(entry.owner.trim()))
    		ret = false;  	
    	return ret;
    }    
}